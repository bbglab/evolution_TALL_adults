import pandas as pd
import os
import click
import subprocess

@click.command()
@click.option('--in_path',
              '-i',
              type=click.Path(exists=True),
              required = True,
              help="Input must be a string written in command line specifying the absolute path to the mutation list "
                   "of the cohort")
@click.option('--output_path',
              '-o',
              type=click.Path(exists=True),
              required=True,
              help="Output must be a string written in command line specifying the absolute path for the output "
                   "of the cohort")
@click.option('--sign',
              '-s',
              type=click.Path(exists=True),
              required=True,
              help="Path to the signature's matrices (cosmic/pcawg signatures)")
@click.option('--type',
              '-t',
              type=str,
              required=True,
              help="Type analysis subset (subset of signatures for BALL/TALL or all signatures of each leukemia)")


def cli(in_path, output_path, sign, type):
    """
    'Given a MAF of mutations it runs deconstructSigs R package. Then with the output results of '
    'deconstructSigs R package calculates the probability for each mutation (type) generated by each '
    'signature using W and H matrices.'

    """

    # READ DATASET AND FILTER OUT INDELS

    muts = pd.read_table(in_path, sep='\t')

    # CREATE TEMPORAL FILE OF MUTATIONS WITHOUT INDELS

    os.mkdir(os.path.join(output_path, "tmp"))

    if 'SAMPLE' in muts.columns:
        muts[['#CHROM', 'POS', 'REF', 'ALT', 'SAMPLE']].to_csv(os.path.join(output_path, "tmp",
                                                                            "mutations_snv.csv"), sep='\t',index=False)
    else:
        muts[['#CHROM', 'POS', 'REF', 'ALT', 'PATIENT']].to_csv(os.path.join(output_path, "tmp",
                                                                            "mutations_snv.csv"), sep='\t', index=False)

    base_path = os.path.dirname(os.path.abspath(__file__))
    decons_script = os.path.join(base_path, 'deconstructSigs.r')

    # RUN DECONSTRUCTSIGN IN R
    subprocess.run(
        'cd ' + output_path + ' && source activate deconstructR && Rscript '+ decons_script +' '+ os.path.join(
            output_path, "tmp", "mutations_snv.csv")+" "+sign+" "+type,
        shell=True, executable='/bin/bash')


    # REMOVE TEMPORAL FILE
    os.remove(os.path.join(output_path, "tmp",
                          "mutations_snv.csv"))
    os.rmdir(os.path.join(output_path, "tmp"))

    # READ SIGNATURE FILE (WEIGHT MATRIX)
    W = pd.read_csv(sign, header=0, sep="\t")

    #  TRANSPOSE
    W = W.T

    # READ EXPOSURE FILE
    H = pd.read_csv(os.path.join(output_path, "signatures_weight.csv"), header=0, sep="\t")

    # COMPUTE PROBABILITIES
    # go over each sample in H matrix and compute the probability for each mutation type in a tri-nuc context

    frames = []  # to collect results sample wise
    flag = 0
    for idx, row in H.iterrows():  # go over each sample
        sample = row['sample_id']
        sig_dic = {}
        allsigs = []
        # get the exposure (i.e total number of mutations belong to each signature) value for the particular sample from H matrix
        for col in H.columns:
            if col not in ['sample_id', 'SSE', 'mutation_count', 'unknown']:
                sig_dic[col] = row[col] * row['mutation_count'] # save the exposuse value in a dictionary per signature name
                allsigs.append(col)  # save the signature names
        # multiple the exposure (from H) with the W matrix
        a = W.copy()  # take a copy of the W matrix (which is the extracted signatures - not sample specific)

        for sig in allsigs:
            a[sig] *= sig_dic[
                sig]  # mutiply the signature columns with the corresponding signature exposure in that particular sample

        # compute the row sum for normalization (i.e sum of values across signature for each mutation/context type)
        a['row_sum'] = a[allsigs].sum(axis=1)

        # normalize the row values with the row sum to driver
        # the probabilities for different signatures for each mutation type
        new = a[allsigs].div(a['row_sum'], axis=0)[allsigs]

        # add info columns
        new['Mutation_type'] = new.index
        new['Sample'] = sample

        # sort the columns
        columns = ['Sample', 'Mutation_type'] + allsigs

        new = new[columns]

        # save the results for each samples in a dataframe
        if flag == 0:
            frames = [new]
            flag += 1
        else:
            frames.append(new)

    results_new = pd.concat(frames)

    # WRITE RESULTS

    # this output file will contains the probabilities for each mutation type (under particular tri-nucleotides) to be
    # generated by different signatures per sample.
    results_new.to_csv(os.path.join(output_path, "mutation_sign_prob.tsv"), sep="\t",  header=True, index=False)


if __name__ == '__main__':
    cli()